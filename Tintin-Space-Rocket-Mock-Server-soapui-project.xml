<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0a907bd8-81f1-4b3f-96e6-c5613598ce0a" activeEnvironment="Default" name="Tintin Space Rocket Mock Server" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="92ac79d5-14a7-4402-aabb-ff8fb7583c65" port="8080" path="/" host="SQLI350004" name="Mock"><con:settings/><con:properties/><con:restMockAction name="/health" method="GET" resourcePath="/health" id="f66e19ac-0b5a-44a2-9824-8dee7ba59097"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="HealthResponse" id="ec14332b-ef4b-4b8b-aa97-2d2aac19c7b0" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"status":"alive"
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/simon/start" method="POST" resourcePath="/simon/start" id="601c1431-e664-487b-b89d-bf88b5a1ccb1"><con:settings/><con:defaultResponse>StartResponseOk</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="StartResponseOk" id="79692bb6-44ba-4e67-8d02-8b3bbf2d78ea" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{ 
	"gamerId": 1
}</con:responseContent><con:header><con:name>location</con:name><con:value>/simon/1/play</con:value></con:header></con:response><con:response name="StartReponseForbidden" id="a40bcb7b-72ad-4373-8d38-8c7ad8c8f145" httpResponseStatus="403" mediaType="application/json"><con:settings/><con:responseContent>{ 
	"message":"Ce joueur a déjà joué aujourd'hui"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>